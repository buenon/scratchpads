{
  "name": "scratchpads",
  "displayName": "Scratchpads",
  "description": "Create multiple scratchpad files of different file types",
  "version": "2.0.0",
  "publisher": "buenon",
  "author": {
    "name": "Nadav Bueno",
    "email": "buenonadav@gmail.com"
  },
  "license": "MIT",
  "homepage": "https://github.com/buenon/scratchpads/blob/master/README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/buenon/scratchpads"
  },
  "icon": "images/icon.png",
  "engines": {
    "vscode": "^1.70.0"
  },
  "categories": [
    "Other"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Scratchpads",
      "properties": {
        "scratchpads.scratchpadsFolder": {
          "type": "string",
          "description": "A custom full path in which the scratchpads will be stored (Note: Data will not be moved)."
        },
        "scratchpads.promptForRemoval": {
          "type": "boolean",
          "default": true,
          "description": "Prompt the user when removing all scratchpads"
        },
        "scratchpads.promptForFilename": {
          "type": "boolean",
          "default": false,
          "description": "Prompt the user for a file name when creating a new scratchpad"
        },
        "scratchpads.autoPaste": {
          "type": "boolean",
          "default": true,
          "description": "Automatically paste clipboard content into the new scratchpad"
        },
        "scratchpads.autoFormat": {
          "type": "boolean",
          "default": true,
          "description": "Automatically format the new scratchpad content (works only if auto paste is on)"
        },
        "scratchpads.renameWithExtension": {
          "type": "boolean",
          "default": false,
          "description": "Include the file extension when renaming a scratchpad"
        },
        "scratchpads.filePrefix": {
          "type": "string",
          "default": "scratch",
          "description": "The prefix to use when creating new scratchpad files"
        },
        "scratchpads.defaultFiletype": {
          "type": "string",
          "default": "",
          "description": "The default file extension to use with 'New scratchpad (default)' command (e.g., 'js', 'ts', 'py')"
        },
        "scratchpads.showInExplorer": {
          "type": "boolean",
          "default": false,
          "description": "Show scratchpad files in the VSCode Explorer panel"
        },
        "scratchpads.useSubfolders": {
          "type": "boolean",
          "default": true,
          "description": "⚠️ DEPRECATED: Use 'useGlobalFolder' instead. Save scratchpads in project-specific subfolders. When disabled, all scratchpads are saved in a single folder.",
          "deprecationMessage": "This setting is deprecated. Use 'scratchpads.useGlobalFolder' instead for clearer configuration."
        },
        "scratchpads.useGlobalFolder": {
          "type": "boolean",
          "default": true,
          "description": "Save all scratchpads in a single global folder instead of project-specific subfolders. When enabled, scratchpads are shared across all projects."
        }
      }
    },
    "views": {
      "explorer": [
        {
          "id": "scratchpads",
          "name": "SCRATCHPADS",
          "when": "config.scratchpads.showInExplorer"
        }
      ]
    },
    "commands": [
      {
        "command": "scratchpads.newScratchpad",
        "title": "Scratchpads: New scratchpad"
      },
      {
        "command": "scratchpads.newScratchpadDefault",
        "title": "Scratchpads: New scratchpad (default)"
      },
      {
        "command": "scratchpads.openScratchpad",
        "title": "Scratchpads: Open scratchpad"
      },
      {
        "command": "scratchpads.openLatestScratchpad",
        "title": "Scratchpads: Open latest scratchpad"
      },
      {
        "command": "scratchpads.renameScratchpad",
        "title": "Scratchpads: Rename scratchpad"
      },
      {
        "command": "scratchpads.removeScratchpad",
        "title": "Scratchpads: Remove a scratchpad"
      },
      {
        "command": "scratchpads.removeAllScratchpads",
        "title": "Scratchpads: Remove all scratchpads"
      },
      {
        "command": "scratchpads.newFiletype",
        "title": "Scratchpads: New filetype"
      },
      {
        "command": "scratchpads.removeFiletype",
        "title": "Scratchpads: Remove custom filetype"
      },
      {
        "command": "scratchpads.openFolder",
        "title": "Scratchpads: Open scratchpads folder"
      },
      {
        "command": "scratchpads.tree.rename",
        "title": "Rename",
        "icon": "$(edit)"
      },
      {
        "command": "scratchpads.tree.delete",
        "title": "Delete",
        "icon": "$(trash)"
      },
      {
        "command": "scratchpads.tree.new",
        "title": "New Scratchpad",
        "icon": "$(add)"
      },
      {
        "command": "scratchpads.tree.removeAll",
        "title": "Remove All Scratchpads",
        "icon": "$(trash)"
      },
      {
        "command": "scratchpads.tree.newDefault",
        "title": "New Default Scratchpad",
        "icon": "$(zap)"
      },
      {
        "command": "scratchpads.tree.sortByName",
        "title": "Sort by Name",
        "icon": "$(sort-precedence)"
      },
      {
        "command": "scratchpads.tree.sortByDate",
        "title": "Sort by Date",
        "icon": "$(calendar)"
      },
      {
        "command": "scratchpads.tree.sortByType",
        "title": "Sort by Type",
        "icon": "$(file)"
      }
    ],
    "menus": {
      "view/item/context": [
        {
          "command": "scratchpads.tree.rename",
          "when": "viewItem == scratchpadFile",
          "group": "inline"
        },
        {
          "command": "scratchpads.tree.delete",
          "when": "viewItem == scratchpadFile",
          "group": "inline"
        }
      ],
      "view/title": [
        {
          "command": "scratchpads.tree.new",
          "when": "view == scratchpads",
          "group": "navigation@1"
        },
        {
          "command": "scratchpads.tree.newDefault",
          "when": "view == scratchpads",
          "group": "navigation@2"
        },
        {
          "command": "scratchpads.tree.sortByName",
          "when": "view == scratchpads",
          "group": "navigation@3"
        },
        {
          "command": "scratchpads.tree.sortByDate",
          "when": "view == scratchpads",
          "group": "navigation@4"
        },
        {
          "command": "scratchpads.tree.sortByType",
          "when": "view == scratchpads",
          "group": "navigation@5"
        },
        {
          "command": "scratchpads.tree.removeAll",
          "when": "view == scratchpads",
          "group": "navigation@6"
        }
      ],
      "commandPalette": [
        {
          "command": "scratchpads.tree.rename",
          "when": "false"
        },
        {
          "command": "scratchpads.tree.delete",
          "when": "false"
        },
        {
          "command": "scratchpads.tree.new",
          "when": "false"
        },
        {
          "command": "scratchpads.tree.removeAll",
          "when": "false"
        },
        {
          "command": "scratchpads.tree.newDefault",
          "when": "false"
        },
        {
          "command": "scratchpads.tree.sortByName",
          "when": "false"
        },
        {
          "command": "scratchpads.tree.sortByDate",
          "when": "false"
        },
        {
          "command": "scratchpads.tree.sortByType",
          "when": "false"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "scratchpads",
        "contents": "No scratchpads yet.\nCreate your first scratchpad and start doodling!\n\n[Create New Scratchpad](command:scratchpads.newScratchpad)"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "dependencies": {
    "language-map": "^1.5.0",
    "ts-md5": "^1.3.1"
  },
  "devDependencies": {
    "@types/glob": "^7.2.0",
    "@types/mocha": "^9.1.1",
    "@types/node": "16.x",
    "@types/vscode": "^1.70.0",
    "@typescript-eslint/eslint-plugin": "^5.31.0",
    "@typescript-eslint/parser": "^5.31.0",
    "@vscode/test-electron": "^2.1.5",
    "eslint": "^8.20.0",
    "eslint-config-prettier": "^8.5.0",
    "eslint-plugin-prettier": "^4.2.1",
    "glob": "^8.0.3",
    "mocha": "^10.8.2",
    "prettier": "^2.7.1",
    "ts-loader": "^9.3.1",
    "typescript": "^4.7.4",
    "webpack": "^5.97.1",
    "webpack-cli": "^4.10.0"
  },
  "activationEvents": [
    "onStartupFinished"
  ]
}
